$containerSize: 240px;
$cubeMargin: 0px;
$totalCube: 128;
$col: 12;

$animationHeightCube: 20px;
$animationDuration: 5s;
$delayAnimation: 0.2;

$cubeSize: ($containerSize / ($totalCube / $col));
$facesPosition: ($cubeSize / 2)-0.2;

* {
  box-sizing: border-box;
}

.container {
  width: $containerSize;
  height: $containerSize;
  position: relative;
  perspective: 1000px;
  left: 50%;
  top: 50%;
  transform-style: preserve-3d;
  transform: translateY(25%) translateX(-100%);
  pointer-events: none;
}

.perspective {
  pointer-events: all;
  transform: rotateX(60deg) rotateZ(25deg);
  transform-style: preserve-3d;
}

.cube, .cube-shadow {
  width: $cubeSize;
  height: $cubeSize;
  transform-style: preserve-3d;
  position: absolute;
}

.cube:hover {
    animation: none;
    transform: translateZ($animationHeightCube)!important;
    cursor: pointer;
}

.cube {animation: rotation $animationDuration infinite ease-in-out;}

.translate-cube-shadow {transform: translateZ(-40px);}

.cube-shadow {
  background: #212122;
  transform: translateZ(-60px);
  animation: scale $animationDuration infinite ease-in-out;
}

.cube div {
  width: 100%;
  height: 100%;
  display: block;
  position: absolute;
  background: #262626;
}

.cube .right {
  background: RGB(var(--secondary));
  transform: rotateY(90deg) translateZ($facesPosition);
  filter: brightness(80%);
}

.cube .top {
  background: RGB(var(--secondary));
  transform: rotateX(0deg) translateZ($facesPosition);
}

.cube .left {
  background: RGB(var(--secondary));
  transform: rotateX(-90deg) translateZ($facesPosition);
  filter: brightness(90%);
}

@keyframes rotation {
  0% {transform: translateZ(0px);}
  50% {transform: translateZ($animationHeightCube);}
  100% {transform: translateZ(0px);}
}

@keyframes scale {
  0% {transform: scale(1)}
  50% {transform: scale(0.75)}
  100% {transform: scale(1)}
}

$columns: ($totalCube / $col) - 1;
$cubeI: 0;
$delayI: 0;
@for $y from 0 through $columns {
  
  $delayI: $y;
  
  @for $x from 0 through $columns {
    $cubeI: $cubeI+1;
    $delayI: $delayI+1;
    #cube-#{$cubeI}, #cube-shadow-#{$cubeI} {
      left: $x * ($cubeSize + $cubeMargin);
      top: $y * ($cubeSize + $cubeMargin);
      animation-delay: ($delayAnimation * $delayI)+s;
    }
  }
}